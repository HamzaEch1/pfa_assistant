import streamlit as st
from . import config # Assuming config.py is in the same directory (app/)
from . import history # Assuming history.py is in the same directory (app/)
from . import auth # Assuming auth.py is in the same directory (app/)

# --- Existing show_sidebar function (ensure it's here or imported correctly) ---
# Placeholder if it's defined elsewhere and imported, or paste its definition here.
# For now, assuming it's similar to the one generated by script.sh:
def show_sidebar():
    """Renders the sidebar content. Assumes user is authenticated."""
    if not st.session_state.get('user'):
        st.sidebar.error("Erreur : Utilisateur non authentifi√©.")
        return

    with st.sidebar:
        st.title(f"{config.PAGE_ICON} {config.PAGE_TITLE}")
        user_display_name = st.session_state.user.get('full_name') or st.session_state.user.get('username', 'Utilisateur')
        st.write(f"Bienvenue, **{user_display_name}**")

        if st.session_state.user.get('is_admin'):
            st.session_state.setdefault('view', 'Chat')
            view_options = ("Chat", "Admin")
            try:
                current_index = view_options.index(st.session_state.view)
            except ValueError:
                current_index = 0
                st.session_state.view = 'Chat'
            st.session_state.view = st.radio(
                "Navigation", view_options, key="view_selector", horizontal=True, index=current_index
            )
        else:
            st.session_state.view = "Chat"

        st.button("D√©connexion", key="logout_btn", on_click=auth.logout, use_container_width=True)
        st.divider()

        if st.session_state.view == "Chat":
            st.button("Nouvelle conversation", type="primary", key="new_chat_btn", on_click=history.start_new_conversation, use_container_width=True)
            st.divider()
            st.subheader("Historique")
            conversation_history = st.session_state.get('conversation_history', {})
            sorted_conv_ids = sorted(
                conversation_history.keys(),
                key=lambda k: conversation_history[k].get("timestamp", "1970-01-01 00:00:00"),
                reverse=True
            )
            if not sorted_conv_ids:
                st.info("Aucune conversation.")
            else:
                current_conv_id = st.session_state.get("current_conversation_id")
                for conv_id in sorted_conv_ids:
                    if conv_id not in conversation_history: continue
                    conv = conversation_history[conv_id]
                    conv_title = conv.get('title', f"Conversation {conv_id[:8]}")
                    col1, col2 = st.columns([0.85, 0.15])
                    with col1:
                        button_type = "primary" if current_conv_id == conv_id else "secondary"
                        st.button(f"{conv_title}", key=f"load_conv_{conv_id}", type=button_type, use_container_width=True, help=f"Charger : {conv_title}", on_click=history.load_conversation, args=(conv_id,))
                    with col2:
                        st.button("üóëÔ∏è", key=f"del_conv_{conv_id}", help=f"Supprimer : {conv_title}", on_click=history.delete_conversation, args=(conv_id,))
            st.divider()
            if st.session_state.get("current_conversation_id") and st.session_state.get("messages"):
                 try:
                    history_text, file_name = history.get_chat_history_text()
                    if history_text:
                        st.download_button(label="T√©l√©charger la conversation", data=history_text, file_name=file_name, mime="text/plain", use_container_width=True)
                 except Exception as e:
                      print(f"Error generating download button: {e}")
        elif st.session_state.view == "Admin":
             st.info("‚öôÔ∏è Panneau Admin")

# --- show_chat_area function (reverted to basic message display) ---
def show_chat_area():
    """Renders the main chat area and input."""
    st.header(f"{config.PAGE_ICON} Assistant {config.PAGE_TITLE}")
    ollama_model_name_display = getattr(config, 'OLLAMA_MODEL_NAME', 'Non sp√©cifi√©')
    st.caption(f"Mod√®le LLM : {ollama_model_name_display}")

    current_conv_id = st.session_state.get('current_conversation_id')
    
    if current_conv_id and current_conv_id in st.session_state.get('conversation_history', {}):
        messages = st.session_state.get('messages', [])
        for i, message in enumerate(messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
    elif not current_conv_id:
         st.info("D√©marrez une nouvelle conversation ou s√©lectionnez-en une dans l'historique.")
    else:
        st.warning("Conversation s√©lectionn√©e non trouv√©e ou messages manquants. Veuillez en choisir une autre.")

# --- Existing apply_styles function (ensure it's here or imported correctly) ---
# Placeholder, assuming it's similar to the one generated by script.sh:
def apply_styles():
    st.markdown("""<style> /* ... Vos styles CSS ici ... */ </style>""", unsafe_allow_html=True) 