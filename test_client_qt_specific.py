#!/usr/bin/env python3
"""
Test sp√©cifique pour les erreurs de reconnaissance CLIENT_QT
"""
import numpy as np
import soundfile as sf
import requests
import tempfile
import os

def test_client_qt_corrections():
    """Teste sp√©cifiquement les corrections pour CLIENT_QT"""
    
    print("üéØ Test des corrections CLIENT_QT")
    
    # Test avec audio de dur√©e moyenne (3.5s) qui g√©n√®re l'erreur "colande client culant"
    sample_rate = 16000
    duration = 3.5
    
    # Simuler une voix avec √©nergie faible pour d√©clencher l'erreur
    audio_data = np.random.random(int(sample_rate * duration)) * 0.08  # √ânergie faible
    
    # Ajouter un pattern vocal r√©aliste
    t = np.linspace(0, duration, int(sample_rate * duration))
    voice_pattern = np.sin(2 * np.pi * 150 * t) * 0.05  # Voix plus douce
    audio_data = audio_data + voice_pattern
    
    # Cr√©er un fichier temporaire
    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
        sf.write(temp_file.name, audio_data, sample_rate)
        temp_path = temp_file.name
    
    try:
        print(f"üì§ Test avec audio de {duration}s (√©nergie faible)")
        
        with open(temp_path, 'rb') as f:
            files = {'audio_file': ('test.wav', f, 'audio/wav')}
            data = {'language': 'fr', 'include_timestamps': 'true'}
            response = requests.post('http://127.0.0.1:8004/transcribe', files=files, data=data)
            
            if response.status_code == 200:
                result = response.json()
                transcription = result.get('transcription', {}).get('text', '')
                print(f"   üìù Transcription brute: '{transcription}'")
                
                # V√©rifier que la correction a fonctionn√©
                if "CLIENT_QT" in transcription.upper():
                    print("   ‚úÖ CLIENT_QT correctement reconnu !")
                elif any(word in transcription.lower() for word in ["colande", "culant", "cl√©ons", "culon"]):
                    print("   ‚ö†Ô∏è  Termes d'erreur d√©tect√©s mais pas encore corrig√©s")
                else:
                    print("   ‚ùì Transcription inattendue")
                    
                print(f"   üéØ R√©sultat final: {transcription}")
            else:
                print(f"   ‚ùå Erreur HTTP {response.status_code}: {response.text}")
                
    finally:
        os.unlink(temp_path)

def test_various_durations():
    """Teste diff√©rentes dur√©es pour voir les patterns de reconnaissance"""
    durations = [1.5, 2.8, 3.2, 3.8, 5.0]
    
    for duration in durations:
        print(f"\n‚è±Ô∏è  Test dur√©e {duration}s")
        
        sample_rate = 16000
        audio_data = np.random.random(int(sample_rate * duration)) * 0.1
        
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
            sf.write(temp_file.name, audio_data, sample_rate)
            temp_path = temp_file.name
        
        try:
            with open(temp_path, 'rb') as f:
                files = {'audio_file': ('test.wav', f, 'audio/wav')}
                data = {'language': 'fr'}
                response = requests.post('http://127.0.0.1:8004/transcribe', files=files, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    transcription = result.get('transcription', {}).get('text', '')
                    print(f"   üìù '{transcription}'")
                    
                    if "CLIENT_QT" in transcription.upper():
                        print("   ‚úÖ CLIENT_QT reconnu")
                    else:
                        print("   ‚ùå CLIENT_QT non reconnu")
        finally:
            os.unlink(temp_path)

if __name__ == "__main__":
    test_client_qt_corrections()
    test_various_durations()
