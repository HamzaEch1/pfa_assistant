#!/usr/bin/env python3
"""
Script de test complet pour la stack Avatar + Coaching + Whisper
Teste toutes les fonctionnalit√©s en temps r√©el
"""

import requests
import json
import time
import asyncio
import logging
from pathlib import Path
import tempfile
import wave
import numpy as np

# Configuration
API_BASE = "http://localhost:8000"
AVATAR_SERVICE = "http://localhost:8003"
WHISPER_SERVICE = "http://localhost:8004"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AvatarCoachingTester:
    def __init__(self):
        self.token = None
        self.session_id = f"test_session_{int(time.time())}"
        
    async def run_complete_test(self):
        """Execute le test complet de la stack"""
        
        print("üöÄ D√âMARRAGE DES TESTS COMPLETS AVATAR + COACHING + WHISPER")
        print("=" * 70)
        
        # 1. Test des services de base
        if not await self.test_services_health():
            print("‚ùå Services non disponibles - Arr√™t des tests")
            return
            
        # 2. Authentification
        if not await self.authenticate():
            print("‚ùå Authentification √©chou√©e - Arr√™t des tests")
            return
            
        # 3. Test Whisper (reconnaissance vocale)
        await self.test_whisper_service()
        
        # 4. Test Avatar simple
        await self.test_avatar_generation()
        
        # 5. Test Coaching KPI
        await self.test_kpi_coaching()
        
        # 6. Test Pipeline complet (Voix ‚Üí Avatar + Coaching)
        await self.test_complete_pipeline()
        
        # 7. Test des questions sp√©cifiques donn√©es bancaires
        await self.test_banking_data_questions()
        
        print("\n" + "=" * 70)
        print("üèÅ TESTS TERMIN√âS")
        
    async def test_services_health(self):
        """Test de sant√© de tous les services"""
        print("\nüîç TEST DE SANT√â DES SERVICES")
        print("-" * 40)
        
        services = [
            ("API Principal", f"{API_BASE}/health"),
            ("Avatar Service", f"{AVATAR_SERVICE}/health"),
            ("Whisper Service", f"{WHISPER_SERVICE}/health")
        ]
        
        all_healthy = True
        
        for name, url in services:
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    print(f"‚úÖ {name}: Op√©rationnel")
                else:
                    print(f"‚ùå {name}: Erreur {response.status_code}")
                    all_healthy = False
            except Exception as e:
                print(f"‚ùå {name}: Non accessible ({e})")
                all_healthy = False
                
        return all_healthy
    
    async def authenticate(self):
        """Authentification sur l'API"""
        print("\nüîê AUTHENTIFICATION")
        print("-" * 40)
        
        try:
            login_data = {
                "username": "admin",
                "password": "admin123"
            }
            
            response = requests.post(
                f"{API_BASE}/api/v1/auth/login",
                data=login_data,
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            
            if response.status_code == 200:
                token_data = response.json()
                if "access_token" in token_data and token_data["access_token"]:
                    self.token = token_data["access_token"]
                    print("‚úÖ Authentification r√©ussie")
                    return True
                    
            print(f"‚ùå √âchec authentification: {response.status_code}")
            return False
            
        except Exception as e:
            print(f"‚ùå Erreur authentification: {e}")
            return False
    
    async def test_whisper_service(self):
        """Test du service de reconnaissance vocale"""
        print("\nüé§ TEST WHISPER (RECONNAISSANCE VOCALE)")
        print("-" * 40)
        
        try:
            # Cr√©er un fichier audio factice
            audio_data = await self.create_fake_audio()
            
            # Test transcription
            files = {"audio_file": ("test_audio.wav", audio_data, "audio/wav")}
            data = {"language": "fr", "include_timestamps": "true"}
            
            response = requests.post(
                f"{WHISPER_SERVICE}/transcribe",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Transcription r√©ussie")
                print(f"   Texte: {result.get('text', 'N/A')[:100]}...")
                print(f"   Langue: {result.get('language', 'N/A')}")
                
                # Test analyse de contenu
                await self.test_speech_analysis(result.get('text', 'Test'))
                
            else:
                print(f"‚ùå √âchec transcription: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur Whisper: {e}")
    
    async def test_speech_analysis(self, text):
        """Test de l'analyse s√©mantique du contenu vocal"""
        try:
            data = {
                "text": text,
                "detect_intent": "true",
                "extract_keywords": "true"
            }
            
            response = requests.post(
                f"{WHISPER_SERVICE}/analyze-speech",
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Analyse vocale r√©ussie")
                print(f"   Intention: {result.get('intent', 'N/A')}")
                print(f"   Mots-cl√©s: {result.get('keywords', [])}")
                print(f"   Coaching n√©cessaire: {result.get('coaching_needed', False)}")
            else:
                print(f"‚ùå √âchec analyse vocale: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur analyse: {e}")
    
    async def test_avatar_generation(self):
        """Test de g√©n√©ration d'avatar simple"""
        print("\nüé≠ TEST G√âN√âRATION AVATAR")
        print("-" * 40)
        
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            data = {
                "question": "Qu'est-ce que la table CLIENT_QT?",
                "user_level": "beginner",
                "include_coaching": "true"
            }
            
            response = requests.post(
                f"{API_BASE}/avatar/generate-real-time-response",
                headers=headers,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Avatar g√©n√©r√© avec succ√®s")
                print(f"   URL Vid√©o: {result.get('video_url', 'N/A')}")
                print(f"   URL Audio: {result.get('audio_url', 'N/A')}")
                print(f"   Coaching inclus: {result.get('coaching_module') is not None}")
                
                if result.get('coaching_module'):
                    module = result['coaching_module']
                    print(f"   Module: {module.get('title', 'N/A')}")
                    print(f"   Dur√©e: {module.get('duration_minutes', 'N/A')} min")
                    print(f"   Le√ßons: {len(module.get('lessons', []))}")
                    print(f"   Quiz: {len(module.get('quiz', []))} questions")
                    
            else:
                print(f"‚ùå √âchec g√©n√©ration avatar: {response.status_code}")
                print(f"   R√©ponse: {response.text[:200]}...")
                
        except Exception as e:
            print(f"‚ùå Erreur avatar: {e}")
    
    async def test_kpi_coaching(self):
        """Test sp√©cifique du coaching KPI"""
        print("\nüéØ TEST COACHING KPI")
        print("-" * 40)
        
        questions_kpi = [
            "Comment mettre √† jour un KPI efficacement?",
            "Quelles sont les bonnes pratiques pour les indicateurs?",
            "Je veux optimiser mes m√©triques de performance"
        ]
        
        for question in questions_kpi:
            try:
                headers = {"Authorization": f"Bearer {self.token}"}
                data = {
                    "question": question,
                    "user_level": "intermediate",
                    "include_coaching": "true"
                }
                
                response = requests.post(
                    f"{API_BASE}/avatar/generate-real-time-response",
                    headers=headers,
                    data=data
                )
                
                if response.status_code == 200:
                    result = response.json()
                    coaching = result.get('coaching_module')
                    
                    if coaching:
                        print(f"‚úÖ Coaching g√©n√©r√© pour: '{question[:50]}...'")
                        print(f"   Titre: {coaching.get('title', 'N/A')}")
                        print(f"   Le√ßons: {len(coaching.get('lessons', []))}")
                        
                        # Test soumission de quiz
                        if coaching.get('quiz'):
                            await self.test_quiz_submission(coaching['quiz'][0])
                    else:
                        print(f"‚ö†Ô∏è  Pas de coaching pour: '{question[:50]}...'")
                        
                await asyncio.sleep(1)  # Pause entre les tests
                
            except Exception as e:
                print(f"‚ùå Erreur coaching: {e}")
    
    async def test_quiz_submission(self, quiz_question):
        """Test de soumission d'une r√©ponse de quiz"""
        try:
            data = {
                "question_id": 0,
                "answer": 1,  # R√©ponse arbitraire
                "coaching_session_id": self.session_id
            }
            
            response = requests.post(
                f"{API_BASE}/avatar/quiz/submit",
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   üìù Quiz soumis - Correct: {result.get('correct', False)}")
            else:
                print(f"   ‚ùå √âchec soumission quiz: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur quiz: {e}")
    
    async def test_complete_pipeline(self):
        """Test du pipeline complet: Voix ‚Üí Analyse ‚Üí Avatar + Coaching"""
        print("\nüîÑ TEST PIPELINE COMPLET")
        print("-" * 40)
        
        # Simuler un input vocal
        fake_speech = "Je veux apprendre les bonnes pratiques pour mettre √† jour mes KPI"
        
        try:
            # 1. Analyse de l'intention vocale
            analysis_data = {
                "text": fake_speech,
                "detect_intent": "true",
                "extract_keywords": "true"
            }
            
            analysis_response = requests.post(
                f"{WHISPER_SERVICE}/analyze-speech",
                data=analysis_data
            )
            
            if analysis_response.status_code != 200:
                print("‚ùå √âchec analyse intention")
                return
                
            analysis = analysis_response.json()
            print(f"‚úÖ Intention d√©tect√©e: {analysis.get('intent', 'N/A')}")
            
            # 2. G√©n√©ration avatar bas√©e sur l'intention
            headers = {"Authorization": f"Bearer {self.token}"}
            avatar_data = {
                "question": fake_speech,
                "user_level": "beginner",
                "include_coaching": str(analysis.get('coaching_needed', False)).lower()
            }
            
            avatar_response = requests.post(
                f"{API_BASE}/avatar/generate-real-time-response",
                headers=headers,
                data=avatar_data
            )
            
            if avatar_response.status_code == 200:
                result = avatar_response.json()
                print("‚úÖ Pipeline complet r√©ussi")
                print(f"   Avatar: {result.get('video_url') is not None}")
                print(f"   Coaching: {result.get('coaching_module') is not None}")
                
                # 3. Test streaming en temps r√©el
                await self.test_streaming_response(fake_speech)
                
            else:
                print(f"‚ùå √âchec pipeline: {avatar_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur pipeline: {e}")
    
    async def test_streaming_response(self, question):
        """Test du streaming de r√©ponse en temps r√©el"""
        try:
            data = {
                "question": question,
                "include_coaching": "true"
            }
            
            response = requests.post(
                f"{API_BASE}/avatar/stream-response",
                data=data,
                stream=True
            )
            
            if response.status_code == 200:
                print("‚úÖ Streaming d√©marr√©")
                
                for line in response.iter_lines():
                    if line:
                        line_str = line.decode('utf-8')
                        if line_str.startswith('data: '):
                            data = json.loads(line_str[6:])
                            print(f"   üì° {data.get('type', 'unknown')}: {data.get('content', '')[:50]}...")
                            
                            if data.get('type') == 'complete':
                                break
            else:
                print(f"‚ùå √âchec streaming: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur streaming: {e}")
    
    async def test_banking_data_questions(self):
        """Test des questions sp√©cifiques sur les donn√©es bancaires"""
        print("\nüíº TEST QUESTIONS DONN√âES BANCAIRES")
        print("-" * 40)
        
        banking_questions = [
            "Qu'est-ce que la table CLIENT_QT?",
            "Qui est propri√©taire des donn√©es bancaires?",
            "Comment sont structur√©es les donn√©es clients?",
            "Quels sont les flux de donn√©es dans le syst√®me?",
            "Comment assurer la s√©curit√© des donn√©es?"
        ]
        
        for question in banking_questions:
            try:
                headers = {"Authorization": f"Bearer {self.token}"}
                data = {
                    "question": question,
                    "dataset_context": "Banque Populaire - Syst√®me Core Banking",
                    "avatar_type": "professional"
                }
                
                response = requests.post(
                    f"{API_BASE}/avatar/generate-data-explanation",
                    headers=headers,
                    data=data
                )
                
                if response.status_code == 200:
                    print(f"‚úÖ Explication g√©n√©r√©e: '{question[:40]}...'")
                    # Le response est un FileResponse (vid√©o)
                    video_size = len(response.content)
                    print(f"   Taille vid√©o: {video_size} bytes")
                else:
                    print(f"‚ùå √âchec pour: '{question[:40]}...' ({response.status_code})")
                    
                await asyncio.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå Erreur question bancaire: {e}")
    
    async def create_fake_audio(self):
        """Cr√©e un fichier audio factice pour les tests"""
        # G√©n√©rer un signal audio simple (silence + bip)
        sample_rate = 16000
        duration = 2  # 2 secondes
        samples = np.zeros(sample_rate * duration, dtype=np.int16)
        
        # Ajouter un bip au milieu
        bip_freq = 440  # Hz
        bip_duration = 0.1  # secondes
        bip_samples = int(sample_rate * bip_duration)
        bip_start = sample_rate  # 1 seconde
        
        t = np.linspace(0, bip_duration, bip_samples)
        bip = (np.sin(2 * np.pi * bip_freq * t) * 16000).astype(np.int16)
        samples[bip_start:bip_start + bip_samples] = bip
        
        # Cr√©er le fichier WAV en m√©moire
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
            with wave.open(f.name, 'wb') as wav_file:
                wav_file.setnchannels(1)  # Mono
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(samples.tobytes())
            
            # Lire le contenu
            with open(f.name, 'rb') as audio_file:
                return audio_file.read()

async def main():
    """Fonction principale"""
    tester = AvatarCoachingTester()
    await tester.run_complete_test()

if __name__ == "__main__":
    asyncio.run(main())
