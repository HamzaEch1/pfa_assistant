user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Custom error handling
    map $status $is_security_error {
        default 0;
        400 1;
        403 1;
        405 1;
        413 1;
    }

    # Upstream definitions
    upstream frontend {
        server frontend:80;
    }

    upstream api {
        server api:8000;
    }

    # HTTP Server block (Redirect to HTTPS)
    server {
        listen 80;
        server_name localhost;
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS Server block
    server {
        listen 443 ssl http2;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        
        # Enhanced SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # HSTS (uncomment in production)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Custom error pages
        error_page 403 /errors/403_security.html;
        
        # Serve error pages directly
        location /errors/ {
            alias /usr/share/nginx/html/errors/;
            internal;
        }
        
        # Enhanced security rules
        
        # Block SQL Injection attempts
        if ($args ~* "([%'])?(\s)*(or|and|union|select|insert|delete|update|drop|count|from|like|group|by|having|order|desc|where|exec|char|varchar|join|declare|cast|convert|truncate|create|delete|alter|md5)(\s)*([%'])?" ) {
            return 403;
        }
        
        # Block common file access patterns (enhanced)
        if ($uri ~* "(/\.)|(\.\.)|~$|(\.htaccess|\.git|\.env|etc/passwd|etc/shadow|wp-config\.php|config\.php|\.DS_Store)") {
            return 403;
        }
        
        # Block path traversal in query parameters
        if ($args ~* "(\.\./|%2e%2e%2f|%252e%252e%252f)") {
            return 403;
        }
        
        # Enhanced XSS protection - block all script tags and common XSS vectors
        if ($args ~* "<[/]?(script|iframe|object|embed|applet|form|img|svg|style|link|meta|body|frame|frameset|base|html)") {
            return 403;
        }
        
        # Block XSS vectors in URI
        if ($request_uri ~* "<[/]?(script|iframe|object|embed|applet|form|img|svg|style)") {
            return 403;
        }
        
        # Block JS event handlers and other common XSS vectors
        if ($args ~* "(onload|onerror|onmouseover|onmouseout|onmousedown|onmouseup|onclick|ondblclick|onkeydown|onkeypress|onkeyup|onchange|onfocus|onblur|eval\(|alert\(|prompt\(|confirm\()") {
            return 403;
        }
        
        # Block additional XSS payloads and URL encodings
        if ($args ~* "(%3C|<).*(%3E|>)|data:text/html|vbscript:|document\.cookie|document\.write|window\.location|String\.fromCharCode") {
            return 403;
        }
        
        # Block javascript: protocol in query parameters - strict rule
        if ($args ~* "javascript:.*\(") {
            return 403;
        }
        
        # Final javascript: catchall - case insensitive with or without encoded characters
        if ($args ~* "(?i)j(?:ava)?s(?:cript)?(?:%3a|:)") {
            return 403;
        }
        
        # Block additional path traversal vectors - cover more encoding variations
        if ($uri ~* "(\.\.(/|%2f|%252f)|(/|%2f|%252f)\.\.)|(\.\.\\|\.\.%5c|%2e%2e%5c|%252e%252e%255c)") {
            return 403;
        }
        
        # Block directory traversal in all URLs, including hidden traversal attempts
        location ~ "\.\.(\\|/|%2f|%5c)" {
            return 403;
        }
        
        # Block specific pattern for /images/../ path traversal 
        location ~* /images/\.\./ {
            return 403;
        }
        
        # Catch more specific path traversal variations
        location ~* ^/images/(\.\./)+(etc/|var/|usr/|bin/|root/|home/) {
            return 403;
        }
        
        # Block additional directory traversal patterns
        if ($request_uri ~* "\.\.") {
            return 403;
        }
        
        # Normalize URI to prevent path traversal
        if ($request_uri ~* "(/\.//|/\.\.//|//\.//|//\.\.//|/\./|/\.\./|\./|\.\./|\.\./)") {
            return 403;
        }
        
        # Block encoded traversal in paths
        if ($request_uri ~* "%2e%2e" ) {
            return 403;
        }
        
        # Block access to hidden files and directories
        location ~ /\. {
            return 403;
        }
        
        # Create a dedicated alias for images to prevent directory traversal
        location ^~ /images/ {
            # Return 403 for any paths containing ..
            if ($request_uri ~* "\.\.|%2e%2e|%252e%252e") {
                return 403;
            }
            
            # Explicitly deny any requests containing ../ combinations
            if ($uri ~* "\.\.") {
                return 403;
            }
            
            # Proxy to frontend for legit requests
            proxy_pass http://frontend;
        }

        # Frontend
        location / {
            # Validate URI to prevent path traversal
            if ($request_uri ~* "\.\.|/\.|\.\./" ) {
                return 403;
            }
            
            # Remove try_files as it's causing issues
            # try_files $uri $uri/ /index.html;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API
        location /api/ {
            # Validate URI to prevent path traversal
            if ($request_uri ~* "\.\.|/\.|\.\./" ) {
                return 403;
            }
            
            proxy_pass http://api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Augmenter les timeouts
            proxy_connect_timeout 1800s;
            proxy_send_timeout 1800s;
            proxy_read_timeout 1800s;
            send_timeout 1800s;
            
            # Augmenter la taille maximale du corps de la requête
            client_max_body_size 100M;
            
            # Désactiver le buffering pour les réponses longues
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }
}
