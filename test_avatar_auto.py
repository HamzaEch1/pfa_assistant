#!/usr/bin/env python3
"""
Script de test pour v√©rifier la g√©n√©ration automatique d'avatar
pour les questions bancaires sp√©cifiques
"""

import requests
import json
import time
import os

# Configuration
API_BASE_URL = "http://localhost:8000"
AVATAR_SERVICE_URL = "http://localhost:8003"

def test_avatar_health():
    """Test de sant√© du service avatar"""
    print("üîç V√©rification du service avatar...")
    try:
        response = requests.get(f"{AVATAR_SERVICE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Service avatar op√©rationnel")
            return True
        else:
            print(f"‚ùå Service avatar non disponible: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur connexion service avatar: {e}")
        return False

def test_api_health():
    """Test de sant√© de l'API principale"""
    print("üîç V√©rification de l'API principale...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API principale op√©rationnelle")
            return True
        else:
            print(f"‚ùå API principale non disponible: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur connexion API: {e}")
        return False

def test_avatar_detection_questions():
    """Test des questions qui devraient d√©clencher la g√©n√©ration d'avatar"""
    
    test_questions = [
        "Qu'est-ce que la table CLIENT_QT?",
        "Qui est propri√©taire de la base de donn√©es?",
        "Explique-moi les colonnes de la table COMPTE",
        "Quels sont les champs de la table TRANSACTION?",
        "Comment fonctionne le syst√®me bancaire?",
        "Donne-moi des informations sur les donn√©es bancaires",
        "Analyse des donn√©es CLIENT_QT",
        "Propri√©taire des donn√©es bancaires"
    ]
    
    print("\nüé¨ Test de d√©tection automatique d'avatar...")
    
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n--- Test {i}/8: {question} ---")
        
        payload = {
            "message": question,
            "session_id": f"test_session_{i}",
            "user_id": "test_user"
        }
        
        try:
            print("üì§ Envoi de la question...")
            response = requests.post(
                f"{API_BASE_URL}/api/chat/",
                json=payload,
                headers=headers,
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ R√©ponse re√ßue")
                
                # V√©rification de la pr√©sence d'avatar
                if "avatar_video_url" in data and data["avatar_video_url"]:
                    print(f"üé• Avatar g√©n√©r√©: {data['avatar_video_url']}")
                    
                    # Test d'acc√®s au fichier vid√©o
                    try:
                        video_response = requests.get(f"{API_BASE_URL}{data['avatar_video_url']}")
                        if video_response.status_code == 200:
                            print(f"‚úÖ Vid√©o accessible ({len(video_response.content)} bytes)")
                        else:
                            print(f"‚ùå Vid√©o non accessible: {video_response.status_code}")
                    except Exception as e:
                        print(f"‚ùå Erreur acc√®s vid√©o: {e}")
                        
                else:
                    print("‚ÑπÔ∏è  Pas d'avatar g√©n√©r√© pour cette question")
                
                # Affichage de la r√©ponse (tronqu√©e)
                if "content" in data:
                    content = data["content"][:200] + "..." if len(data["content"]) > 200 else data["content"]
                    print(f"üí¨ R√©ponse: {content}")
                    
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   D√©tails: {error_data}")
                except:
                    print(f"   R√©ponse brute: {response.text[:200]}")
                    
        except requests.exceptions.Timeout:
            print("‚è∞ Timeout - La g√©n√©ration prend plus de 60 secondes")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur r√©seau: {e}")
        
        # Pause entre les tests
        if i < len(test_questions):
            print("‚è≥ Pause de 2 secondes...")
            time.sleep(2)

def test_manual_avatar_generation():
    """Test de g√©n√©ration manuelle d'avatar"""
    print("\nüé® Test de g√©n√©ration manuelle d'avatar...")
    
    payload = {
        "text": "Bonjour, je suis votre assistant bancaire. La table CLIENT_QT contient les informations des clients.",
        "avatar_type": "professional"
    }
    
    try:
        response = requests.post(
            f"{AVATAR_SERVICE_URL}/generate_avatar_from_text",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Avatar g√©n√©r√© manuellement")
            print(f"üé• Chemin: {data.get('video_path', 'Non sp√©cifi√©')}")
        else:
            print(f"‚ùå Erreur g√©n√©ration manuelle: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS D'AVATAR AUTOMATIQUE")
    print("=" * 50)
    
    # Tests de sant√©
    avatar_healthy = test_avatar_health()
    api_healthy = test_api_health()
    
    if not avatar_healthy or not api_healthy:
        print("\n‚ùå Services non disponibles - Arr√™t des tests")
        return
    
    # Test de g√©n√©ration manuelle
    test_manual_avatar_generation()
    
    # Tests de d√©tection automatique
    test_avatar_detection_questions()
    
    print("\n" + "=" * 50)
    print("üèÅ TESTS TERMIN√âS")
    print("\nInstructions pour tester manuellement:")
    print("1. Ouvrir http://localhost:3000")
    print("2. Poser ces questions:")
    print("   - 'Qu'est-ce que la table CLIENT_QT?'")
    print("   - 'Qui est propri√©taire des donn√©es?'")
    print("   - 'Explique-moi les donn√©es bancaires'")
    print("3. V√©rifier que l'avatar appara√Æt automatiquement")

if __name__ == "__main__":
    main()
